@description('Information about what resource is calling this Recipe. Generated by Radius.')
param context object

extension kubernetes with {
  kubeConfig: ''
  namespace: context.runtime.kubernetes.namespace
} as kubernetes

// Temporary object to hold input values since input parameters are not passed to UDT recipes
// https://dev.azure.com/azure-octo/Incubations/_workitems/edit/10284
var containerProperties = {
  frontend: {
    // Frontend container of TodoList application
    image: 'ghcr.io/radius-project/samples/demo:latest'
    ports: [
      {
        name: 'https'
        containerPort: 3000
      }
    ]
    envs: [
      {
        name: 'CONNECTION_REDIS_HOST'
        value: 'cache.${context.runtime.kubernetes.namespace}.svc.cluster.local'
      }
      {
        name: 'CONNECTION_REDIS_PORT'
        value: '6379'
      } 
    ]
  }
}

resource deployment 'apps/Deployment@v1' = {
  metadata: {
    name: '${context.resource.name}-deployment'
    labels: {
      app: context.application.name
      resource: context.resource.name
    }
  }
  spec: {
    selector: {
      matchLabels: {
        app: context.application.name
        resource: context.resource.name
      }
    }
    template: {
      metadata: {
        labels: {
          app: context.application.name
          resource: context.resource.name
          // Label pods with the application name so `rad run` can find the logs.
          'radapp.io/application': context.application.name
        }
      }
      spec: {
        containers: [
          {
            name: context.resource.name
            image: containerProperties.frontend.image
            ports: containerProperties.frontend.ports
            env: containerProperties.frontend.envs
          }
        ]
      }
    }
  }
}

resource service 'core/Service@v1' = {
  metadata: {
    name: context.resource.name
    labels: {
      app: context.application.name
      resource: context.resource.name
    }
  }
  spec: {
    type: 'ClusterIP'
    selector: {
      app: context.application.name
      resource: context.resource.name
    }
    ports: [
      {
        port: containerProperties.frontend.ports[0].containerPort
      }
    ]
  }
}

output result object = {
  resources: [
    // '/planes/kubernetes/local/namespaces/${service.metadata.namespace}/providers/core/Service/${service.metadata.name}'
    '/planes/kubernetes/local/namespaces/${deployment.metadata.namespace}/providers/apps/Deployment/${deployment.metadata.name}'
  ]
  values: {
    // serviceName: '${service.metadata.name}.${service.metadata.namespace}.svc.cluster.local'
    serviceName: context.resource.name
    servicePort: containerProperties.frontend.ports[0].containerPort
  }
}
