@description('Information about what resource is calling this Recipe. Generated by Radius.')
param context object

extension kubernetes with {
  kubeConfig: ''
  namespace: context.runtime.kubernetes.namespace
} as kubernetes

resource deployment 'apps/Deployment@v1' = {
  metadata: {
    name: '${context.resource.name}-deployment'
    labels: {
      app: context.application.name
      resource: context.resource.name
    }
  }
  spec: {
    selector: {
      matchLabels: {
        app: context.application.name
        resource: context.resource.name
      }
    }
    template: {
      metadata: {
        labels: {
          app: context.application.name
          resource: context.resource.name
          // Label pods with the application name so `rad run` can find the logs.
          'radapp.io/application': context.application.name
        }
      }
      spec: {
        containers: [
          {
            name: context.resource.name
            image: context.resource.properties.container.image
            // TODO: Convert to array
            // TODO: Add handling null values for optional properties
            // env: context.resource.properties.container.env
            // TODO: Convert to array
            // TODO: Add handling null values for optional properties
            // command: context.resource.properties.container.command
            // TODO: Convert to array
            // TODO: Needs further testing for handling null values for optional properties
            // args: empty(context.resource.properties.container.args) ? [] : context.resource.properties.container.args
            workingDir: context.resource.properties.container.workingDir
            // TODO: Convert to array
            // TODO: Type enforcement does not seem to be working
            // ports: context.resource.properties.container.ports
            ports: [
              {
                containerPort: context.resource.properties.container.ports.http.containerPort
                name: 'http'
              }
            ]
          }
        ]
      }
    }
  }
}

// resource service 'core/Service@v1' = {
//   metadata: {
//     name: context.resource.name
//     labels: {
//       app: context.application.name
//       resource: context.resource.name
//     }
//   }
//   spec: {
//     type: 'ClusterIP'
//     selector: {
//       app: context.application.name
//       resource: context.resource.name
//     }
//     ports: [
//       {
//         port: context.resource.properties.ports[0].containerPort
//       }
//     ]
//   }
// }

output result object = {
  resources: [
    // '/planes/kubernetes/local/namespaces/${service.metadata.namespace}/providers/core/Service/${service.metadata.name}'
    '/planes/kubernetes/local/namespaces/${deployment.metadata.namespace}/providers/apps/Deployment/${deployment.metadata.name}'
  ]
  values: {
    serviceName: context.resource.name
    servicePort: context.resource.properties.ports[0].containerPort
  }
}
